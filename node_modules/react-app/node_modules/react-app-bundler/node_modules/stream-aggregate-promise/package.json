{
  "name": "stream-aggregate-promise",
  "version": "0.1.2",
  "description": "Aggregate streams of string, buffers and objects into promise",
  "main": "index.js",
  "scripts": {
    "test": "mocha specs.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/andreypopp/stream-aggregate-promise"
  },
  "keywords": [
    "stream",
    "promise",
    "aggregate",
    "buffer",
    "string",
    "object"
  ],
  "author": {
    "name": "Andrey Popp",
    "email": "8mayday@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "semver": "~2.1.0",
    "mocha": "~1.12.1",
    "through": "~2.3.4"
  },
  "dependencies": {
    "stream-aggregate": "~0.1.1",
    "kew": "~0.3.0"
  },
  "readme": "# stream-aggregate-promise\n\nAggregates a Node.js stream and calls a callback with the accumulated result of\nfirst encountered error.\n\n    var aggregate = require('stream-aggregate-promise')\n\n    aggregate(stream)\n      .then(function(result) { ... })\n      .fail(function(err) { ... })\n\nBinary streams (which emit buffer objects) are aggregated into a single buffer,\nobject streams -- into an array of emitted objects and streams of strings --\ninto a single concatenated string.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andreypopp/stream-aggregate-promise/issues"
  },
  "homepage": "https://github.com/andreypopp/stream-aggregate-promise",
  "_id": "stream-aggregate-promise@0.1.2",
  "_from": "stream-aggregate-promise@~0.1.2"
}
