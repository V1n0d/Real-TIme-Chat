{
  "name": "react-app-controller",
  "version": "0.3.0",
  "description": "React application controller",
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec specs/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/andreypopp/react-app-controller"
  },
  "keywords": [
    "react",
    "controller",
    "history",
    "pushState"
  ],
  "author": {
    "name": "Andrey Popp",
    "email": "8mayday@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {
    "semver": "~2.2.1",
    "jshint": "~2.3.0",
    "mocha": "1.x.x",
    "react": "~0.8.0",
    "browserify": "3.x.x",
    "es5-shim": "~2.1.0",
    "mocha-phantomjs": "~3.1.6",
    "phantomjs": "~1.9.2-3"
  },
  "dependencies": {
    "url-pattern": "~0.2.2"
  },
  "readme": "# react-app-controller\n\nApplication controller component for [React][1].\n\nIt keeps track of `window.location` (via History API) and renders UI according\nto its routes table. It can be used both on client and server.\n\n[1]: https://facebook.github.io/react\n\n## Installation\n\nInstall via npm:\n\n    % npm install react-app-controller\n\nYou certainly will need to install React itself:\n\n    % npm install react\n\n## Creating a controller\n\nYou can use `react-app-controller` to control how components are rendered in\nbrowser according to `window.location`:\n\n    var React = require('react');\n    var createController = require('react-app-controller');\n\n    var MainPage = React.createClass({\n      ...\n    });\n\n    var AboutPage = React.createClass({\n      ...\n    });\n\n    var controller = createController({\n      routes: {\n        '/': MainPage,\n        '/about': AboutPage\n      }\n    });\n\nInstantiated `controller` is essentially a React component (one you would\nusually create with `React.createClass(...)` function).\n\n## Client side usage\n\nWhen we are ready to start our controller in a browser we use its `.render()`\nstatic method instead of `React.renderComponent`.\n\n    controller.render(document.body, function(err, controller) {\n      // controller instantiated and rendered into DOM\n    });\n\nNow `controller` is fully functional, it listens to `popstate` event and react\naccordingly.\n\n### Transitions to different routes\n\nMethod `.navigate(url)` can be used to navigate to a specified URL:\n\n    controller.navigate('/about');\n\nAnother method `.navigateQuery(obj)` can be used to update just the current\nquery string values:\n\n    controller.navigateQuery({search: 'term'});\n\nBoth these methods call `window.pushState(..)` internally so browser location\nwill be updated accordingly.\n\nYou probably would want to use these methods when some event occurs like\nclicking an anchor element.\n\n## Server side usage\n\nThe same controller can be used to pre-generate UI markup on a server:\n\n    var createController = require('react-app-controller');\n\n    var controller = createController({\n      routes: {\n        '/': MainPage,\n        '/about': AboutPage\n      }\n    });\n\nMethod `.renderToString(url, cb)` takes a URL and produces corresponding markup\nasynchronously:\n\n    controller.renderToString('/about', function(err, markup) {\n      // serve markup to a client\n    });\n\n## Handling NotFoundError\n\nWhen no route is matched for a specified URL you can define\n`renderNotFound()` method to generate UI for this case:\n\n    var controller = createController({\n      routes: {\n        ...\n      },\n\n      renderNotFound: function() {\n        return (\n          <div className=\"NotFound\">\n            Sorry, no item could be found for a specified request.\n          </div>\n        );\n      }\n    });\n\nIf no `renderNotFound()` was defined and condition occurs then `NotFoundError`\nwill be thrown.\n\n## Overriding .render() method\n\nControllers are React components but they have `.render()` method\nimplemented by default. It looks like this:\n\n    render: function() {\n      return React.DOM.div(null, this.state.page);\n    }\n\nNote the `this.state.page`, it is the currently active component according to\n`window.location` and routing table (`routes` attribute you passed as a part of\na controller specification in `createController`).\n\nIn case there were no matches for a current URL then `this.state.page` will be\n`null`. You should handle this case according your needs.\n\nYou can override the `.render()` by own implementation, just pass it as a part\nof controller specification into `createController`.\n",
  "bugs": {
    "url": "https://github.com/andreypopp/react-app-controller/issues"
  },
  "homepage": "https://github.com/andreypopp/react-app-controller",
  "_id": "react-app-controller@0.3.0",
  "_from": "react-app-controller@~0.3.0"
}
