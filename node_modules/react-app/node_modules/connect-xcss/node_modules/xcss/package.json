{
  "name": "xcss",
  "version": "0.14.3",
  "description": "CSS bundler for modular UI components",
  "main": "index.js",
  "bin": {
    "xcss": "./xcss",
    "xcss-classmap": "./xcss-classmap"
  },
  "scripts": {
    "test": "mocha ./specs/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/andreypopp/xcss"
  },
  "keywords": [
    "css",
    "preprocessor"
  ],
  "author": {
    "name": "Andrey Popp",
    "email": "8mayday@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "dgraph": "~0.12.0",
    "dgraph-css-import": "~0.6.1",
    "stream-combiner": "0.0.2",
    "rework-classmap": "0.1.0",
    "css-pack": "~0.8.2",
    "optimist": "~0.6.0",
    "deps-topo-sort": "~0.2.0",
    "detective": "~2.2.0",
    "resolve": "~0.5.1",
    "kew": "~0.3.0",
    "dgraph-live": "~0.5.0",
    "lodash": "~2.3.0",
    "stream-aggregate": "~0.1.1"
  },
  "devDependencies": {
    "semver": "~2.2.1",
    "jshint": "~2.3.0",
    "mocha": "~1.14.0",
    "stream-aggregate-promise": "~0.1.2",
    "rework": "~0.19.0",
    "rework-inherit": "~0.2.1",
    "autoprefixer": "~0.8.x",
    "rework-vars": "~2.0.2"
  },
  "readme": "# xcss\n\nCSS bundler with the following features:\n\n  * Dependency resolution using Node module resolution algorithm.\n  * Stylesheet AST transformations in spirit of rework.\n  * Source maps support.\n  * Elimination of unused class rules.\n  * Class name compression.\n\nIt is like [browserify][1] but for CSS.\n\n[1]: http://browserify.org\n\n## Installation\n\n    % npm install xcss\n\n## Basic usage\n\nxcss can be used as a command-line utility:\n\n    Usage: xcss [options] entry\n\n    Options:\n      -h, --help       Show this message and exit\n      -v, --version    Print xcss version and exit\n      -d, --debug      Emit source maps\n      -c, --compress   Compress output\n      --class-map      Use class map to remove unused stylesheet rules\n      -t, --transform  Apply transform\n\n## API\n\nUsage from Node.js is pretty simple:\n\n    var xcss = require('xcss');\n\n    var bundle = xcss({\n      transform: ['xcss/transforms/vars'],\n      classMap: {\n        '.theOnlyUsedClassName': true\n      },\n      debug: true // generate source map\n    });\n\n    bundle.pipe(process.stdout);\n\n## Dependency resolution\n\nxcss uses Node module resolution strategy to resolve dependencies of each\nconcrete CSS module. To import other modules a inside package you should use\nrelative identifier like `./dep` or `./lib/dep`. To import stylesheets from\nother packages in `node_modules/` directory you should use just package\nidentifier `pkg` and if you want a submodule in a package — `pkg/submodule`.\n\nAs a package author you can customize an entry point to you package by providing\na `\"style\"` property in `package.json`. If you `\"style\"` property is set to\n`\"./lib/styles.css\"` like so:\n\n    {\n      ...\n      \"name\": \"pkg\",\n      \"style\": \"./lib/styles.css\",\n      ...\n    }\n\nthen a user of your package will get `pkg/lib/style` when importing `pkg`.\n\n## Transforms\n\nxcss comes bundled with three transform — `extend`, `vars` and `autoprefixer`\nwhich are all based on corresponding transforms for rework — `rework-inherit`,\n`rework-vars` and `autoprefixer`.\n\nYou can use transforms by using a `--transform` option:\n\n    xcss -t xcss/transforms/vars -t xcss/transforms/extend ./main.css\n\nAs you can see, xcss supports rework transforms but have slightly different\nconfiguration for them which allows using them from command line. Each transform\nresides in its own module and should require no configuration (that means having\na set of sensible defaults).\n\nUsually that means that using rework transforms are super easy, for example to\ncreate a xcss transform from `rework-vars` you just create a module with the\nfollowing contents:\n\n    var vars = require('rework-vars);\n\n    module.exports = function(style, ctx) {\n      return vars(ctx.vars)(style.stylesheet);\n    }\n\n## Elimination of unused class rules\n\nTo remove unused stylesheet rules you should pass a class map file via\n`--class-map` option. Class map file is a JSON file formatted like\n`{\".class-name\": true}`.\n\nYou can use `xcss-classmap` command line utility to build one from JavaScript\ncode:\n\n    Usage: xcss-classmap [options] entry ...\n\n    Options:\n      -h, --help      Show this message and exit\n      -v, --version   Print xcss version and exit\n\nIt extracts class names marked with `cx()` function calls, for example the\nfollowing code:\n\n    var classString = cx('some-class', 'another-class');\n\nwould result in a class map:\n\n    {\n      \"some-class\": true,\n      \"another-class\": true\n    }\n\nAt runtime `classString` will be equal to `.some-class .another-class` so you\ncan use it to insert `class` attribute in a DOM.\n\nAnother way to call `cx()` function it to pass an object literal with class\nnames as keys and boolean expressions as values:\n\n    var classString = cx({\n      'some-class': true,\n      'another-class': someCondition()\n    });\n\nThat way at runtime `classString` will be evaluated so that it only contains\nclass names those values evaluated to `true`.\n\nIn CommonJS environment you can obtain `cx()` function in module `xcss/cx`.\n\n## Class name compression\n\nClass map passed as `--class-map` option can have string as values, which will\nbe used to replace class names. That means you can generate class map from you\ncodebase which will shorten class names.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andreypopp/xcss/issues"
  },
  "homepage": "https://github.com/andreypopp/xcss",
  "_id": "xcss@0.14.3",
  "_from": "xcss@~0.14.1"
}
