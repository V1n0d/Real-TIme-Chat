{
  "name": "dgraph",
  "version": "0.12.1",
  "description": "Extract and transform dependency graphs",
  "main": "index.js",
  "scripts": {
    "test": "tap module-deps-test/*.js"
  },
  "bin": {
    "dgraph": "dgraph"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/andreypopp/dgraph"
  },
  "keywords": [
    "graph",
    "dependency",
    "deps",
    "commonjs",
    "browser",
    "browserify"
  ],
  "author": {
    "name": "Andrey Popp",
    "email": "8mayday@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "as-stream": "~0.1.0",
    "through": "~2.3.4",
    "resolve": "~0.5.0",
    "stream-aggregate-promise": "~0.1.1",
    "browser-resolve": "~1.1.3",
    "lodash": "2.x.x",
    "detective": "~2.2.0",
    "JSONStream": "~0.7.1",
    "minimist": "0.0.3",
    "kew": "~0.2.2",
    "stream-combiner": "0.0.2"
  },
  "devDependencies": {
    "browser-pack": "~0.10.1",
    "tap": "~0.4.4",
    "JSONStream": "~0.7.1",
    "concat-stream": "~1.0.1",
    "jshint": "~2.1.11",
    "semver": "~2.1.0",
    "mocha": "~1.13.0"
  },
  "readme": "# dgraph\n\n`dgraph` is a replacement for `module-deps` which:\n\n  * is almost fully compatible with `module-deps` for the exception of\n    different caching mechanism, otherwise it reuses test suite from\n    `module-deps`\n  * allows you to extract dependencies and enrich modules via module transforms\n    (in addition to source transform)\n\n## Installation\n\n    % npm install dgraph\n\n## Usage\n\n`dgraph` is fully compatible with `module-deps` so you all configuration options\nand API are the same:\n\n    var dgraph = require('dgraph'),\n        JSONStream = require('JSONStream')\n\n    dgraph('./app.coffee', {transform: 'coffeeify'})\n      .pipe(JSONStream.stringify())\n      .pipe(process.stdout)\n\n### Global transforms\n\nTransforms specified via command line or function arguments only works for\nmodules not in `node_modules/` (this is behaviour of `module-deps` also).\n\n`dgraph` also supports `globalTransform` argument which allows to specify\ntransforms for all modules even those in `node_modules/`.\n\n### Module transforms\n\nIn addition to source transforms which are supported by `module-deps`, there's\nmodule transforms which can transform modules themselves.\n\nFor `dgraph` to distinguish between source and module transforms you should\ndefine a module transform as a function of two arguments â€” `filename` and\n`graph`. That way module transforms can use Graph API to resolve dependencies.\n\nEven extraction of CommonJS dependencies implemented as a module transform:\n\n    var detective = require('detective')\n\n    module.exports = function(mod, graph) {\n      if (graph.opts.noParse && graph.opts.noParse.indexOf(mod.id) > -1) return\n      var deps = detective(mod.source)\n\n      return graph.resolveMany(deps, mod)\n        .then(function(deps) { return {deps: deps} })\n    }\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andreypopp/dgraph/issues"
  },
  "homepage": "https://github.com/andreypopp/dgraph",
  "_id": "dgraph@0.12.1",
  "_from": "dgraph@~0.12.0"
}
